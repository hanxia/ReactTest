{"version":3,"sources":["Pages/Index.js","Pages/List.js","Pages/Home.js","AppRouter.js","serviceWorker.js","index.js"],"names":["Index","props","state","to","Component","List","list","cid","title","console","log","this","match","path","params","tempId","id","setState","map","item","index","key","uid","Home","AppRouter","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAmBeA,E,YAbX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,GAFE,E,sEAKf,OAEI,kBAAC,IAAD,CAAUC,GAAG,e,GARLC,aCmCLC,E,YArCX,WAAYJ,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTI,KAAK,CACD,CAACC,IAAI,IAAIC,MAAM,sDACf,CAACD,IAAI,IAAIC,MAAM,sDACf,CAACD,IAAI,IAAIC,MAAM,wDANR,E,iFAYfC,QAAQC,IAAIC,KAAKV,MAAMW,MAAMC,MAC7BJ,QAAQC,IAAIC,KAAKV,MAAMW,MAAME,QAC7B,IAAIC,EAAOJ,KAAKV,MAAMW,MAAME,OAAOE,GACnCL,KAAKM,SAAS,CAACD,GAAGD,M,+BAIlB,OAEA,4BAEQJ,KAAKT,MAAMI,KAAKY,KAAI,SAACC,EAAKC,GACtB,OACI,wBAAIC,IAAKD,GACN,kBAAC,IAAD,CAAMjB,GAAI,SAASgB,EAAKG,KAAxB,IAA+BH,EAAKX,gB,GA3B5CJ,aCUJmB,E,YATX,WAAYtB,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,GAFE,E,sEAKf,OAAU,kE,GANCE,aCmBJoB,MAdf,WACE,OACE,kBAAC,IAAD,KACI,4BACI,4BAAI,kBAAC,IAAD,CAAMrB,GAAG,KAAT,gBAAJ,KACA,4BAAI,kBAAC,IAAD,CAAMA,GAAG,WAAT,gBAAJ,MAGJ,kBAAC,IAAD,CAAOU,KAAK,IAAIY,OAAK,EAACC,UAAW1B,IACjC,kBAAC,IAAD,CAAOa,KAAK,YAAYa,UAAWrB,IACnC,kBAAC,IAAD,CAAOQ,KAAK,SAASa,UAAWH,MCLpBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DCZNmB,IAASC,OACT,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD0HjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.357b5494.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\n\n\nclass Index extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n    render() { \n        return ( \n            //  <h2>Index组件</h2> \n            <Redirect to='/home/'></Redirect>\n             \n        );\n    }\n}\n \nexport default Index;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nclass List extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            list:[\n                {cid:123,title:'技术胖的个人博客-1'},\n                {cid:456,title:'技术胖的个人博客-2'},\n                {cid:789,title:'技术胖的个人博客-3'},\n            ]\n         }\n    }\n\n    componentDidMount(){\n        console.log(this.props.match.path);\n        console.log(this.props.match.params);\n        let tempId=this.props.match.params.id\n        this.setState({id:tempId })\n    }\n\n    render() { \n        return (  \n        // <h2>List Page -> {this.state.id}</h2> \n        <ul>\n            {\n                this.state.list.map((item,index)=>{\n                    return (\n                        <li key={index}>\n                           <Link to={'/list/'+item.uid}> {item.title}</Link> \n                        </li>\n                    )\n                })\n            }\n        </ul>\n        \n        );\n    }\n}\n \nexport default List;","import React, { Component } from 'react';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n    render() { \n        return (  <h2>我是 Home 页面</h2> );\n    }\n}\n \nexport default Home;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Index from './Pages/Index';\nimport List from './Pages/List';\nimport Home from './Pages/Home';\n\n\nfunction AppRouter() {\n  return (\n    <Router>\n        <ul>\n            <li><Link to=\"/\">首页</Link> </li>\n            <li><Link to=\"/list/1\">列表</Link> </li>\n        </ul>\n\n        <Route path=\"/\" exact component={Index} />\n        <Route path=\"/list/:id\" component={List} />\n        <Route path=\"/home/\" component={Home} />\n    </Router>\n  );\n}\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import App from './App';\nimport AppRouter from './AppRouter'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<AppRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}